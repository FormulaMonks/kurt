import type { KurtAdapter } from "./KurtAdapter"
import type { KurtSchema, KurtSchemaInner } from "./KurtSchema"
import type { ZodError } from "zod"

/**
 * Base class for all errors thrown by Kurt and Kurt adapters.
 *
 * If there is a new error kind that adapters need to throw which doesn't
 * correspond to any existing subclass of this base class, those new
 * subclasses should be added to cover the new use cases.
 */
export abstract class KurtError extends Error {
  /** The Kurt adapter that was in use when the error occurred */
  abstract readonly adapter: KurtAdapter
}

/**
 * Base class for all Kurt errors thrown for rejected requests.
 */
export abstract class KurtRequestError extends KurtError {}

/**
 * Thrown by a Kurt adapter when the request tried to use a capability or
 * feature that isn't supported by this particular adapter (but might be
 * supported by other adapters, or by the same adapter class if instantiated
 * with different configuration, such as selecting a different LLM snapshot).
 */
export class KurtCapabilityError extends KurtError {
  constructor(
    readonly adapter: KurtAdapter,
    readonly missingCapability: string
  ) {
    super(`This adapter doesn't support: ${missingCapability}`)
  }
}

/**
 * Base class for all Kurt errors thrown when handling a result stream.
 */
export abstract class KurtResultError extends KurtError {}

/**
 * Thrown by Kurt when generated output cannot finish normally due to reaching
 * a length limit (such as a caller-imposed configured maximum token count,
 * or an overall context window size limit of the underlying LLM).
 *
 * The partially generated output is included as a `text` property, for purposes
 * of troubleshooting and/or graceful recovery by user applications.
 */
export class KurtResultLimitError extends KurtResultError {
  constructor(
    readonly adapter: KurtAdapter,

    /**
     * The partial text comprising the tokens that were generated by Kurt
     * before the limit was reached.
     *
     * This may be useful for troubleshooting why the limit was reached,
     * and some user applications may potentially be able to salvage useful
     * output from the partial text.
     */
    readonly text: string
  ) {
    super(
      "While generating output, a length limit stopped generation before it was complete."
    )
  }
}

/**
 * Thrown by Kurt when generated output was blocked (often for safety reasons),
 * either because of rules configured by the caller, or universal baseline
 * rules that are always enforced by the LLM provider.
 */
export class KurtResultBlockedError extends KurtResultError {
  constructor(
    readonly adapter: KurtAdapter,

    /**
     * The partial text comprising the tokens that were generated by Kurt
     * before the block was encountered.
     *
     * This may be useful for troubleshooting why the block was reached,
     * and some user applications may potentially be able to salvage useful
     * output from the partial text.
     */
    readonly text: string,

    /**
     * The reason why the generated output was blocked.
     *
     * Applications should be careful when relying on this reason
     * programmatically, because it is likely to be LLM provider-specific.
     *
     * Kurt makes no attempt at this time to normalize or enumerate the
     * different kinds of block rules that might be enforced.
     */
    readonly reason: string
  ) {
    super(`The generated output was blocked for reason: ${reason}`)
  }
}

/**
 * Thrown by Kurt when generated output cannot be parsed as structured data
 * (for example, invalid JSON syntax).
 *
 * The generated output is included as a `text` property, for purposes
 * of troubleshooting and/or graceful recovery by user applications.
 */
export class KurtResultParseError extends KurtResultError {
  constructor(
    readonly adapter: KurtAdapter,

    /**
     * The text that Kurt failed to parse as structured data.
     *
     * This may be useful for troubleshooting why it failed to parse,
     * and some user applications may potentially be able to salvage
     * useful information from this text.
     */
    readonly text: string,

    /**
     * The underlying error that was thrown when parsing the generated output.
     */
    readonly cause: SyntaxError
  ) {
    super(`The generated output wasn't parseable as structured data.`)
  }
}

/**
 * Thrown by Kurt when generated output didn't pass validation with the
 * given structured data schema.
 *
 * The generated output is included as a `text` property, for purposes
 * of troubleshooting and/or graceful recovery by user applications.
 */
export class KurtResultValidateError<
  I extends KurtSchemaInner = KurtSchemaInner,
> extends KurtResultError {
  constructor(
    readonly adapter: KurtAdapter,

    /**
     * The schema that the generated output data failed to validate against.
     */
    readonly schema: KurtSchema<I>,

    /**
     * The text associated with the generated output that failed validation.
     */
    readonly text: string,

    /**
     * The generated output data that failed validation.
     */
    readonly data: unknown,

    /**
     * The underlying error that was thrown when validating the generated data.
     */
    readonly cause: ZodError
  ) {
    super("The generated output didn't match the required schema.")
  }
}
